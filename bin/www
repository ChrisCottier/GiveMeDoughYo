#!/usr/bin/env node
// #!/usr/bin/env node

// const { port } = require("../config");
// console.log(port);

// const app = require("../app");
// // const api = require('../api');
// const db = require("../db/models");

// // Check the database connection before starting the app.
// db.sequelize
//   .authenticate()
//   .then(() => {
//     console.log("Database connection success! Sequelize is ready to use...");

//     // Start listening for connections.
//     // api.listen(apiPort, () => console.log(`API is listening on port ${apiPort}...`))
//     app.listen(port, () => console.log(`Listening on port ${port}...`));
//   })
//   .catch((err) => {
//     console.log("Database connection failure.");
//     console.error(err);
//   });

/**
 * Module dependencies.
 */
const app = require("../app");
const debug = require("debug")("starter:server");
const http = require("http");
/**
 * Get port from environment and store in Express.
 */
const port = normalizePort(process.env.PORT || "3000");
app.set("port", port);
/**
 * Create HTTP server.
 */
const server = http.createServer(app);
/**
 * Listen on provided port, on all network interfaces.
 */
server.listen(port);
server.on("error", onError);
server.on("listening", onListening);
/**
 * Normalize a port into a number, string, or false.
 */
function normalizePort(val) {
  const port = parseInt(val, 10);
  if (isNaN(port)) {
    // named pipe
    return val;
  }
  if (port >= 0) {
    // port number
    return port;
  }
  return false;
}
/**
 * Event listener for HTTP server "error" event.
 */
function onError(error) {
  if (error.syscall !== "listen") {
    throw error;
  }
  const bind = typeof port === "string" ? "Pipe " + port : "Port " + port;
  // handle specific listen errors with friendly messages
  switch (error.code) {
    case "EACCES":
      console.error(bind + " requires elevated privileges");
      process.exit(1);
      break;
    case "EADDRINUSE":
      console.error(bind + " is already in use");
      process.exit(1);
      break;
    default:
      throw error;
  }
}
/**
 * Event listener for HTTP server "listening" event.
 */
function onListening() {
  const addr = server.address();
  const bind = typeof addr === "string" ? "pipe " + addr : "port " + addr.port;
  debug("Listening on " + bind);
}
